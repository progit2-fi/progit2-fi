=== Versionhallinnasta

(((versionhallinta)))
Mikä on ``versionhallinta'', ja miksi sinun pitäisi välittää?
Versionhallinta on järjestelmä, joka tallentaa muutokset tiedostoon tai settiin tiedostoja ajan myötä, jotta voit myöhemmin palauttaa niistä tietyt versiot.
Tämän kirjan esimerkeissä tulet käyttämään ohjelmisto lähdekoodia, kun tiedostot versio kontrolloidaan, vaikka todellisuudessa voit tehdä tämän melkein minkä tyyppiselle tiedostolle tietokoneella.

Jos olet graafinen- tai web-suunnittelija ja haluat pitää jokaisen version kuvasta tai layoutista (minkä todennäköisemmin haluat tehdä), Versionhallinta järjestelmää (VCS) on erittäin järkevä käyttää.
Se antaa sinun palauttaa valitut tiedostot takaisin edelliseen tilaan, palauttaa koko projektin edelliseen tilaan, vertailla muutoksia ajan myötä, nähdä kuka viimeksi muokkasi jotain, joka saattaa aiheuttaa ongelman, kuka toi esille ongelman ja milloin, ja enemmän.
Käyttämällä VCS:ssää se myös yleensä tarkoittaa että jos tyrit jotain tai menetät tiedostoja voit helposti saada ne takaisin.
Lisäksi saat kaiken tämän hyvin vähällä vaivalla.

==== Paikallinen versionhallinta järjestelmä

(((versionhallinta, paikallinen)))

Monen ihmisen valinta versionhallinta menetelmälle on kopioida tiedostot toiseen hakemistoon (ehkä aikaleimattuun hakemistoon, jos he ovat fiksuja).
Tämä lähestymistapa on hyvin yleinen koska se on niin yksinkertainen, mutta se on myös erittäin virhe altis.
On helppoa unohtaa missä hakemistossa olet parhaillaan ja vahingossa kirjoittaa väärään tiedostoon tai kopioida tiedostojen päälle, joka ei ollut tarkoituksesi.

Hoitaakseen tämän ongelman, ohjelmoijat kauan sitten kehittivät paikallisen VCS:n jossa oli yksinkertainen tietokanta joka piti kaikki muutokset tiedostoihin versionhallinnan alla.

.Paikallinen versionhallinta
image::images/local.png[Paikallinen versionhallinta diagrami]

Yksi kaikista suosituimmista VCS työkaluista on järjestelmä nimeltä RCS, mikä on yhä levittynyt useille koneille tänä päivänä.
https://www.gnu.org/software/rcs/[RCS] toimii pitämällä korjaustiedosto settejä (mitkä ovat erot tiedostojen välillä) tietyssä formaatissa levyllä; se voi sitten luoda uudelleen sen miltä mikä tahansa tiedosto näytti missä tahansa ajankohdassa lisäämällä kaiken korjaustiedostoihin.

==== Keskitetty versionhallinta järjestelmä

(((versionhallinta, keskitetty)))

Seuraava iso ongelma, jonka ihmiset kohtaavat on se, että heidän tarvitsee tehdä yhteistyötä muiden ohjelmoijien kanssa muissa järjestelmissä.
Hoitaakseen tämän ongelman, Keskitetty Versionhallintajärjestelmä (CVCS:n) kehitettiin.
Tällaisilla järjestelmillä (kuten CVS, Subversion, ja Perforce) on yksi serveri, joka sisältää kaikki versioidut tiedostot, ja asiakkaiden määrän, jotka tarkastavat tiedostoja tuosta keskitetystä paikasta. (((CVS)))(((Subversion)))(((Perforce)))
Monien vuosien ajan tämä on ollut standardi versionhallinnalle.

.Keskitetty versionhallinta
image::images/centralized.png[Keskitetty versionhallinta diagrami]

Tämä asetelma tarjoaa monia etuja, etenkin yli paikallisten VCS:n.
Esimerkiksi kaikki tietävät tiettyyn tasoon asti mitä kaikki muut ovat projektissa tekemässä.
Ylläpitäjillä on pikkutarkka kontrolli siihen mitä kukin voi tehdä, ja on paljon helpompaa ylläpitää CVCS:ää kuin käsitellä paikallisia tietokantoja jokaisen asiakkaan kohdalla.

Kuitenkin tällä asetelmalla on myös joitain vakavia haittoja.
Kaikista ilmeisin on yhden pisteen vika, jonka keskitetty serveri esittää.
Jos tuo serveri menee alas tunniksi, kyseisen tunnin aikana kukaan ei voi tehdä yhteistyötä ollenkaan tai tallentaa versioituja muutoksia mihinkään minkä parissa he työskentelevät. Jos keskitetyn tietokannan päällä oleva kovalevy vioittuu, ja oikeanlaisia varmuuskopioita ei ole pidetty, menetät ihan kaiken -- koko projekti historian poisluettuna mikä tahansa versio ihmisillä sattuu olemaan heidän paikallisella laitteellansa.
Paikallinen VCS systeemi kärsii tästä samasta ongelmasta -- aina kun sinulla on koko projektin historia yhdessä paikassa, riskeeraat sen kaiken menettämisen.

==== Hajautettu versionhallinta järjestelmä

(((versionhallinta, hajautettu)))

Tämä on se missä Hajautettu versionhallintajärjestelmä (DVCS:n) astuu kuvaan.
DVCS:ssä (kuten Git, Mercurial, Bazaar tai Darcs), asiakkaat eivät vain tarkista viimeisintä versiota tiedostoista; pikemminkin he täysin peilaavat repositoryn, sisältäen sen koko historian.
Täten, jos yksikään serveri kuolee, ja nämä systeemit olivat yhteistyössä serverin kautta, mikä tahansa asiakkaan repositoreista voidaan kopioida takaisin serverille sen palauttamiseksi.
Jokainen kopio on tosiaan kokonainen varmuuskopio kaikesta datasta.

.Hajautettu versionhallinta.
image::images/distributed.png[Hajautettu versionhallinta diagrami]

Lisäksi, moni näistä järjestelmistä pystyy käsittämään melko hyvin usean etä repositoryn kanssa työskentelyn, joten voit tehdä yhteistyöstä eri ihmisryhmien kanssa eri tavoilla samanaikaisesti, samassa projektissa.
Tämä mahdollistaa sinua asettamaan useita työnkulku tyyppejä, joka ei olisi mahdollista keskitetyssä järjestelmässä, kuten hierarkialliset mallit.
